{"version":3,"sources":["../../../src/@ionic-native/plugins/screenshot/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAI/D;;;;;;;;;;;;;;;;;GAiBG;AASH;IAAgC,8BAAiB;IAAjD;;IA4DA,CAAC;IA1DC;;;;;;;;;OASG;IACH,yBAAI,GAAJ,UAAK,MAAe,EAAE,OAAgB,EAAE,QAAiB;QACvD,MAAM,CAAC,IAAI,OAAO,CAChB,UAAC,OAAO,EAAE,MAAM;YACd,SAAS,CAAC,UAAU,CAAC,IAAI,CACvB,UAAC,KAAU,EAAE,MAAW;gBACtB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC;YACH,CAAC,EACD,MAAM,EACN,OAAO,EACP,QAAQ,CACT,CAAC;QACJ,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,wBAAG,GAAH,UAAI,OAAgB;QAClB,MAAM,CAAC,IAAI,OAAO,CAChB,UAAC,OAAO,EAAE,MAAM;YACd,SAAS,CAAC,UAAU,CAAC,GAAG,CACtB,UAAC,KAAU,EAAE,MAAW;gBACtB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClB,CAAC;YACH,CAAC,EACD,OAAO,CACR,CAAC;QACJ,CAAC,CACF,CAAC;IACJ,CAAC;IACI,qBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,yBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA3DW,UAAU;QARtB,MAAM,CAAC;YACN,UAAU,EAAE,YAAY;YACxB,MAAM,EAAE,mCAAmC;YAC3C,SAAS,EAAE,sBAAsB;YACjC,IAAI,EAAE,gDAAgD;YACtD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC;SACvC,CAAC;OAEW,UAAU,CA4DtB;IAAD,iBAAC;CA5DD,AA4DC,CA5D+B,iBAAiB,GA4DhD;SA5DY,UAAU","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\ndeclare const navigator: any;\r\n\r\n/**\r\n * @name Screenshot\r\n * @description Captures a screen shot\r\n * @usage\r\n * ```typescript\r\n * import { Screenshot } from '@ionic-native/screenshot';\r\n *\r\n * constructor(private screenshot: Screenshot) { }\r\n *\r\n * ...\r\n *\r\n * // Take a screenshot and save to file\r\n * this.screenshot.save('jpg', 80, 'myscreenshot.jpg').then(onSuccess, onError);\r\n *\r\n * // Take a screenshot and get temporary file URI\r\n * this.screenshot.URI(80).then(onSuccess, onError);\r\n * ```\r\n */\r\n@Plugin({\r\n  pluginName: 'Screenshot',\r\n  plugin: 'com.darktalker.cordova.screenshot',\r\n  pluginRef: 'navigator.screenshot',\r\n  repo: 'https://github.com/gitawego/cordova-screenshot',\r\n  platforms: ['Android', 'iOS', 'macOS']\r\n})\r\n\r\nexport class Screenshot extends IonicNativePlugin {\r\n\r\n  /**\r\n   *  Takes screenshot and saves the image\r\n   *\r\n   * @param format {string} Format can take the value of either 'jpg' or 'png'\r\n   * On ios, only 'jpg' format is supported\r\n   * @param quality {number}  Determines the quality of the screenshot.\r\n   *        Default quality is set to 100.\r\n   * @param filename {string} Name of the file as stored on the storage\r\n   * @returns {Promise<any>}\r\n   */\r\n  save(format?: string, quality?: number, filename?: string): Promise<any> {\r\n    return new Promise<any>(\r\n      (resolve, reject) => {\r\n        navigator.screenshot.save(\r\n          (error: any, result: any) => {\r\n            if (error) {\r\n              reject(error);\r\n            } else {\r\n              resolve(result);\r\n            }\r\n          },\r\n          format,\r\n          quality,\r\n          filename\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   *  Takes screenshot and returns the image as an URI\r\n   *\r\n   * @param quality {number} Determines the quality of the screenshot.\r\n   *        Default quality is set to 100.\r\n   * @returns {Promise<any>}\r\n   */\r\n  URI(quality?: number): Promise<any> {\r\n    return new Promise<any>(\r\n      (resolve, reject) => {\r\n        navigator.screenshot.URI(\r\n          (error: any, result: any) => {\r\n            if (error) {\r\n              reject(error);\r\n            } else {\r\n              resolve(result);\r\n            }\r\n          },\r\n          quality\r\n        );\r\n      }\r\n    );\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}